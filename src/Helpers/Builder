<?php
require_once __DIR__ . "/../autoload.php";

use YandexDirectSDK\Common\ConsoleLauncher;
use YandexDirectSDK\Common\Dir;
use YandexDirectSDK\Common\File;

class Builder extends ConsoleLauncher
{
    protected $rootDir;
    protected $serviceDir;
    protected $modelDir;
    protected $collectionDir;

    /**
     * Builder constructor.
     * @throws Exception
     */
    public function __construct()
    {
        $this->rootDir = Dir::bind(__DIR__.'/../');
        $this->serviceDir =  Dir::bind($this->rootDir->realPath)->change('Services');
        $this->modelDir =  Dir::bind($this->rootDir->realPath)->change('Models');
        $this->collectionDir =  Dir::bind($this->rootDir->realPath)->change('Collections');
    }

    public function execute(): void
    {
        $this->bind('model', function($options){
            $file = File::bind($this->modelDir->path.DIRECTORY_SEPARATOR.$options['model'].'.php');
            $class = 'YandexDirectSDK\Models\\'.$options['model'];
            $className = $options['model'];

            if ($file->exists()) {
                $this->error("Model file [{$file->realPath}] already exists");
            }

            if (class_exists($class)){
                $this->error("Model class [{$class}] already exists");
            }

            $content = "<?php \n";
            $content .= "namespace YandexDirectSDK\Models; \n\n";
            $content .= "use YandexDirectSDK\Components\Model; \n";
            $content .= "use YandexDirectSDK\Components\Result; \n";
            $content .= "use YandexDirectSDK\Components\QueryBuilder; \n\n";
            $content .= "/**  \n";
            $content .= " * Class {$className} \n";
            $content .= " * \n";
            $content .= " * @package YandexDirectSDK\Models \n";
            $content .= " */ \n";
            $content .= "class {$className} extends Model \n";
            $content .= "{ \n";
            $content .= "    protected static \$compatibleCollection; \n\n";
            $content .= "    protected static \$serviceMethods = []; \n\n";
            $content .= "    protected static \$properties = []; \n\n";
            $content .= "    protected static \$nonWritableProperties = []; \n\n";
            $content .= "    protected static \$nonReadableProperties = []; \n\n";
            $content .= "    protected static \$nonUpdatableProperties = []; \n\n";
            $content .= "    protected static \$nonAddableProperties = []; \n";
            $content .= "}";

            $file->create($content);
            $this->message("{$class}: OK");
        });

        $this->bind('collection for', function($options){
            $file = File::bind($this->collectionDir->path.DIRECTORY_SEPARATOR.$options['collection'].'.php');
            $modelClass = 'YandexDirectSDK\Models\\'.$options['for'];
            $modelClassName = $options['for'];
            $collectionClass = 'YandexDirectSDK\Collections\\'.$options['collection'];
            $collectionClassName = $options['collection'];

            if (!class_exists($modelClass)){
                $this->error("Model class [{$modelClass}] does not exist");
            }

            if ($file->exists()) {
                $this->error("Collection file [{$file->realPath}] already exists");
            }

            if (class_exists($collectionClass)){
                $this->error("Collection class [{$collectionClass}] already exists");
                die();
            }

            $content = "<?php \n";
            $content .= "namespace YandexDirectSDK\Collections; \n\n";
            $content .= "use YandexDirectSDK\Components\Result; \n";
            $content .= "use YandexDirectSDK\Components\QueryBuilder; \n";
            $content .= "use YandexDirectSDK\Components\ModelCollection; \n";
            $content .= "use {$modelClass}; \n\n";
            $content .= "/**  \n";
            $content .= " * Class {$collectionClassName} \n";
            $content .= " * \n";
            $content .= " * @package YandexDirectSDK\Collections \n";
            $content .= " */ \n";
            $content .= "class {$collectionClassName} extends ModelCollection \n";
            $content .= "{ \n";
            $content .= "    /** \n";
            $content .= "     * @var {$modelClassName}[] \n";
            $content .= "     */ \n";
            $content .= "    protected \$items = []; \n\n";
            $content .= "    /** \n";
            $content .= "     * @var {$modelClassName} \n";
            $content .= "     */ \n";
            $content .= "    protected static \$compatibleModel = {$modelClassName}::class; \n\n";
            $content .= "    protected static \$serviceMethods = []; \n";
            $content .= "}";

            $file->create($content);
            $this->message("{$collectionClass}: OK");
        });

        $this->bind('service', function($options){
            $file = File::bind($this->serviceDir->path.DIRECTORY_SEPARATOR.$options['service'].'Service.php');
            $class = 'YandexDirectSDK\Services\\'.$options['service'].'Service';
            $className = $options['service'].'Service';

            if ($file->exists()) {
                $this->error("Service file [{$file->realPath}] already exists");
            }

            if (class_exists($class)){
                $this->error("Service class [{$class}] already exists");
            }

            $content = "<?php \n";
            $content .= "namespace YandexDirectSDK\Services; \n\n";
            $content .= "use YandexDirectSDK\Components\Result; \n";
            $content .= "use YandexDirectSDK\Components\Service; \n";
            $content .= "use YandexDirectSDK\Components\QueryBuilder; \n\n";
            $content .= "/**  \n";
            $content .= " * Class {$className} \n";
            $content .= " * \n";
            $content .= " * @package YandexDirectSDK\Services \n";
            $content .= " */ \n";
            $content .= "class {$className} extends Service \n";
            $content .= "{ \n";
            $content .= "    protected static \$name = ''; \n\n";
            $content .= "    protected static \$modelClass = ''; \n\n";
            $content .= "    protected static \$modelCollectionClass = ''; \n\n";
            $content .= "    protected static \$methods = []; \n";
            $content .= "}";

            $file->create($content);
            $this->message("{$class}: OK");
        });

        $this->start();
    }
}

try{
    (new Builder())->execute();
} catch (Exception $e){
    (new ConsoleLauncher())->error($e->getMessage());
}